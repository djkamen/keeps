// Generated by Dagger (https://dagger.dev).
package com.notesapp.domain.usecases;

import com.notesapp.domain.repositories.CollaborationRepository;
import com.notesapp.domain.repositories.NotesRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DeleteNoteUseCase_Factory implements Factory<DeleteNoteUseCase> {
  private final Provider<NotesRepository> notesRepositoryProvider;

  private final Provider<CollaborationRepository> collaborationRepositoryProvider;

  public DeleteNoteUseCase_Factory(Provider<NotesRepository> notesRepositoryProvider,
      Provider<CollaborationRepository> collaborationRepositoryProvider) {
    this.notesRepositoryProvider = notesRepositoryProvider;
    this.collaborationRepositoryProvider = collaborationRepositoryProvider;
  }

  @Override
  public DeleteNoteUseCase get() {
    return newInstance(notesRepositoryProvider.get(), collaborationRepositoryProvider.get());
  }

  public static DeleteNoteUseCase_Factory create(Provider<NotesRepository> notesRepositoryProvider,
      Provider<CollaborationRepository> collaborationRepositoryProvider) {
    return new DeleteNoteUseCase_Factory(notesRepositoryProvider, collaborationRepositoryProvider);
  }

  public static DeleteNoteUseCase newInstance(NotesRepository notesRepository,
      CollaborationRepository collaborationRepository) {
    return new DeleteNoteUseCase(notesRepository, collaborationRepository);
  }
}
