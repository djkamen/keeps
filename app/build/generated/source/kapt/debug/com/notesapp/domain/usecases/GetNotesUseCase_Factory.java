// Generated by Dagger (https://dagger.dev).
package com.notesapp.domain.usecases;

import com.notesapp.domain.repositories.NotesRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GetNotesUseCase_Factory implements Factory<GetNotesUseCase> {
  private final Provider<NotesRepository> notesRepositoryProvider;

  public GetNotesUseCase_Factory(Provider<NotesRepository> notesRepositoryProvider) {
    this.notesRepositoryProvider = notesRepositoryProvider;
  }

  @Override
  public GetNotesUseCase get() {
    return newInstance(notesRepositoryProvider.get());
  }

  public static GetNotesUseCase_Factory create(Provider<NotesRepository> notesRepositoryProvider) {
    return new GetNotesUseCase_Factory(notesRepositoryProvider);
  }

  public static GetNotesUseCase newInstance(NotesRepository notesRepository) {
    return new GetNotesUseCase(notesRepository);
  }
}
