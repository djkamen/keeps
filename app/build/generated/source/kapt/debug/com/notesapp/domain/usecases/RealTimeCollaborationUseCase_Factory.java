// Generated by Dagger (https://dagger.dev).
package com.notesapp.domain.usecases;

import com.notesapp.domain.repositories.CollaborationRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RealTimeCollaborationUseCase_Factory implements Factory<RealTimeCollaborationUseCase> {
  private final Provider<CollaborationRepository> collaborationRepositoryProvider;

  public RealTimeCollaborationUseCase_Factory(
      Provider<CollaborationRepository> collaborationRepositoryProvider) {
    this.collaborationRepositoryProvider = collaborationRepositoryProvider;
  }

  @Override
  public RealTimeCollaborationUseCase get() {
    return newInstance(collaborationRepositoryProvider.get());
  }

  public static RealTimeCollaborationUseCase_Factory create(
      Provider<CollaborationRepository> collaborationRepositoryProvider) {
    return new RealTimeCollaborationUseCase_Factory(collaborationRepositoryProvider);
  }

  public static RealTimeCollaborationUseCase newInstance(
      CollaborationRepository collaborationRepository) {
    return new RealTimeCollaborationUseCase(collaborationRepository);
  }
}
