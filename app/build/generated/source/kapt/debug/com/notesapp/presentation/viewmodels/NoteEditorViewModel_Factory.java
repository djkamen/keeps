// Generated by Dagger (https://dagger.dev).
package com.notesapp.presentation.viewmodels;

import com.notesapp.domain.repositories.AuthRepository;
import com.notesapp.domain.usecases.GetNoteUseCase;
import com.notesapp.domain.usecases.SaveNoteUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NoteEditorViewModel_Factory implements Factory<NoteEditorViewModel> {
  private final Provider<SaveNoteUseCase> saveNoteUseCaseProvider;

  private final Provider<GetNoteUseCase> getNoteUseCaseProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  public NoteEditorViewModel_Factory(Provider<SaveNoteUseCase> saveNoteUseCaseProvider,
      Provider<GetNoteUseCase> getNoteUseCaseProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    this.saveNoteUseCaseProvider = saveNoteUseCaseProvider;
    this.getNoteUseCaseProvider = getNoteUseCaseProvider;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public NoteEditorViewModel get() {
    return newInstance(saveNoteUseCaseProvider.get(), getNoteUseCaseProvider.get(), authRepositoryProvider.get());
  }

  public static NoteEditorViewModel_Factory create(
      Provider<SaveNoteUseCase> saveNoteUseCaseProvider,
      Provider<GetNoteUseCase> getNoteUseCaseProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    return new NoteEditorViewModel_Factory(saveNoteUseCaseProvider, getNoteUseCaseProvider, authRepositoryProvider);
  }

  public static NoteEditorViewModel newInstance(SaveNoteUseCase saveNoteUseCase,
      GetNoteUseCase getNoteUseCase, AuthRepository authRepository) {
    return new NoteEditorViewModel(saveNoteUseCase, getNoteUseCase, authRepository);
  }
}
